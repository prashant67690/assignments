/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
// const uuid = require("uuid");
const app = express();

let arr = [
  {
    id: 1,
    title: "gym at 7",
    description: "i have to go to gym for the push day and chest exercises",
  },
  {
    id: 2,
    title: "College at 11",
    description: "i have to go to college for the orientation",
  },
];

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  if (arr.length == 0) return res.status(404).send();
  return res.status(200).json(arr);
});

app.get("/todos/:id", (req, res) => {
  let id = req.params.id;

  if (id === null || id > arr.length) {
    return res.status(404).send();
  }
  return res.status(200).json(arr[id - 1]);
});

app.post("/todos", (req, res) => {
  const title = req.body.title;
  const description = req.body.description;
  const id = arr.length + 1;

  if (!todo) {
    res.status(404).send();
  }

  arr.push({ id, title, description });

  res.status(201).json(arr[arr.length - 1]);
});

app.put("todos/:id", (req, res) => {
  if (id === null || id > arr.length) {
    res.status(404).send();
  }

  if (!todo) {
    res.status(404).send();
  }

  const title = req.body.title;
  const description = req.body.description;

  arr[id - 1].title = title;
  arr[id - 1].description = description;

  res.status(200).send();
});

app.delete("/todos/:id", (req, res) => {
  const id = req.params.id;

  if (!todo) {
    res.status(404).send();
  }

  if (id === null || id > arr.length) {
    res.status(404).send();
  }
  const result = [];

  for (let i = 0; i < arr.length; i++) {
    if (arr[i].id != id) {
      result.push(arr[i]);
    }
  }

  arr = result;
  res.status(200).send();
});

app.all("*", (req, res) => {
  res.status(404).send();
});

app.listen(3000);

module.exports = app;
